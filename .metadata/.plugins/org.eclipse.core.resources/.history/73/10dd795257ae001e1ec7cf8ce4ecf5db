package br.com.cod3r.modelo;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Stream;

public class Tabuleiro {
	
	private int linhas;
	private int colunas;
	private int minas;
	
	public final List<Campo> campos = new ArrayList<>();

	public Tabuleiro(int linhas, int colunas, int minas) {
		this.linhas = linhas;
		this.colunas = colunas;
		this.minas = minas;
		
		gerarCampos();
		associarOsVizinhos();
		sortearMinas();
	}

	public void gerarCampos() {	
		for(int linha = 0; linha < linhas; linha++) {
			for(int coluna = 0; coluna < colunas; coluna++) {
				campos.add(new Campo(linha, coluna));
			}
		}
	}
	//Aqui foi criado um array List do tipo Campo de duas dimensões

	public void associarOsVizinhos() {
		for(Campo c1: campos) {
			for(Campo c2: campos) {
				c1.adicionarVizinho(c2);
			}
		}
	}
	//O array List criado anteriormente foi associado através do forEach a duas variáveis, as linhas (horizontais) foram associadas a c2 e as colunas (verticais) associadas a c1
	
	private void sortearMinas() {
		long minasArmadas = 0;
		Predicate<Campo> minado = c -> c.isMinado();
		
		do {
			minasArmadas = campos.stream().filter(minado).count();
			int aleatorio = (int)(Math.random() * campos.size());
			campos.get(aleatorio).minar();
		} while(minasArmadas < minas);
	}
	
	Predicate<Campo> feito = c -> objetivoAlcancado();
	
	public boolean objetivoAlcancado() {
		return campos.stream().allMatch(c -> c.objetivoAlcancado());
	}
	
	public void reiniciar() {
		campos.stream().forEach(c -> c.reiniciar());
		sortearMinas();
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		//Classe mais ágil e prática para criar e concatenar strings. Quando há muitos elementos a execucação do método toString pode entravar a execução do sistema, nesses casos utilizamos o toString.
		
		int i = 0;
		for(int linhaContagem = 0; linhaContagem < linhas; linhaContagem++) {
			for(int colunaContagem = 0; colunaContagem < colunas; colunaContagem++) {
				sb.append(" ");
				sb.append(campos.get(i));
				sb.append(" ");
				i++;
			}
			sb.append("\n");
		}
		return sb.toString();
	}
	
}
