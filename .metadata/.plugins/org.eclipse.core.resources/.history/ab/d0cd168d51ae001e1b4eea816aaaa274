package br.com.cod3r.modelo;

import java.util.ArrayList;
import java.util.List;

import br.com.cod3r.excecao.ExplosaoException;

public class Campo {
	
	private final int linha;
	private final int coluna;
	
	private boolean aberto = false;
	private boolean minado = false;
	private boolean marcado = false;
	
	private List<Campo> vizinhos = new ArrayList<Campo>();
	
	
	public Campo(int linha, int coluna) {
		this.linha = linha;
		this.coluna = coluna;
	}
	
	public boolean adicionarVizinho(Campo vizinho) {
		boolean linhaDiferente = linha != vizinho.linha;
		boolean colunaDiferente = coluna != vizinho.coluna;
		boolean diagonal = colunaDiferente && linhaDiferente;
		
		int deltaLinha = Math.abs(linha - vizinho.linha);
		int deltaColuna = Math.abs(coluna - vizinho.coluna);
		int deltaGeral = deltaColuna + deltaLinha;
		
		if(deltaGeral == 1 && !diagonal) {
			vizinhos.add(vizinho);
			return true;
		} else if (deltaGeral == 2 && diagonal) {
			vizinhos.add(vizinho);
			return true;
		} else {
			return false;
		}
		
	}
		public void alternarMarcacao() {
			if(!aberto) {
				marcado = !marcado;
			}
		}
		
		public boolean abrir() {
			if(!aberto && !marcado) {
				aberto = true;
				
				if(minado) {
					throw new ExplosaoException();
				}
				
				if(vizinhacaSegura()) {
					vizinhos.forEach( v -> v.abrir());
				}
				return true;
			} else return false;
		}
		
		boolean vizinhacaSegura() {
			
			return vizinhos.stream().noneMatch( v -> v.minado);
		}
		
		public void minar() {
			minado =  true;
		}
		
		public boolean isMarcado() {
			return marcado;
		}
		
		public boolean isAberto() {
			return aberto;
		}
		
		public boolean isFechado() {
			return !aberto;
		}
		
		public int getLinha() {
			return linha;
		}
		
		public int getColuna() {
			return coluna;
		}
		
		public boolean isMinado() {
			return minado;
		}
		
		public boolean objetivoAlcancado() {
			boolean desvendado = !minado && aberto;
			boolean protegido = minado && marcado;
			
			return desvendado || protegido;
		}
		
		public long minasNaVizinhaca() {
			return vizinhos.stream().filter( v -> v.minado).count();
		}
		
		void reiniciar() {
			aberto = false;
			minado = false;
			marcado = false;
		}
		
		public String toString() {
			if(marcado) {
				return "X";
			} else if(aberto && minado) {
				return "*";
			} else if(aberto && minasNaVizinhaca() > 0) {
				return Long.toString(minasNaVizinhaca());
			} else if(aberto) {
				return " ";
			} else {
				return "?";
			}
		}
}
